name: Web Deploy

on:
  push:
    branches: [ master ]
    paths:
      - 'packages/site/**'
      - '.github/workflows/web.yml'   

permissions: read-all

jobs:

  build_test_and_package:
    runs-on: ubuntu-latest
    outputs:
      current-version: ${{ steps.package-version.outputs.current-version }}
    permissions:
      contents: write
      deployments: write   
    steps:
      - uses: actions/setup-node@0a44ba7841725637a19e28fa30b79a866c81b0a6 # v4.04
        with:
          node-version: '20'
      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
      - name: Install
        run: yarn --frozen-lockfile
      - name: Unit Test
        run: yarn workspace @tranmere-web/api-stack test
        env:
          DD_KEY: ${{ secrets.DD_KEY }}
          CF_SPACE: ${{ secrets.CF_SPACE }}
          CF_KEY: ${{ secrets.CF_KEY }}
      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@3cf273023a0dda27efcd3164bdfb51908dd46a5b

  aws_cdk:
    runs-on: ubuntu-latest
    needs: build_test_and_package
    steps:
      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
      - uses: actions/setup-node@0a44ba7841725637a19e28fa30b79a866c81b0a6 # v4.0.4
        with:
          node-version: '20'      
      - name: Install
        run: yarn --frozen-lockfile   

      - name: Deploy CDK
        run: |
          yarn workspace @tranmere-web/api-stack cdk deploy --require-approval never "*"
        env:
          AWS_REGION: eu-west-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          EMAIL_ADDRESS: ${{ secrets.EMAIL_ADDRESS }}
          CF_SPACE: ${{ secrets.CF_SPACE }}
          CF_KEY: ${{ secrets.CF_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DD_TAGS: git.commit.sha:${{ github.sha }},git.repository_url:github.com/${{ github.repository }}

  data_dog:
    runs-on: ubuntu-latest
    needs: [build_test_and_package, aws_cdk]
    steps:
      - uses: actions/setup-node@0a44ba7841725637a19e28fa30b79a866c81b0a6 # v4.0.4
        with:
          node-version: '20'    
      - name: Install Data Dog CI
        run: | 
          yarn global add @datadog/datadog-ci@${{ vars.DataDogCIVersion}}
      # https://docs.datadoghq.com/serverless/aws_lambda/installation/nodejs/?tab=awssam    
      - name: Instrument
        run: | 
          datadog-ci lambda instrument --functions-regex "^TranmereWebStack" -r eu-west-1 -v ${{ vars.DataDogNodeLayerVersion}} -e ${{ vars.DataDogExtensionLayerVersion}} --service tranmere-web --env prod --version ${{needs.build_test_and_package.outputs.current-version}} --merge-xray-traces false
        env:
          AWS_REGION: eu-west-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DATADOG_API_KEY: ${{ secrets.DD_KEY }}
          DATADOG_SITE: datadoghq.eu

  api_acceptance_test:
    runs-on: ubuntu-latest
    needs: [aws_cdk, data_dog]
    steps:
      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
      - uses: actions/setup-node@0a44ba7841725637a19e28fa30b79a866c81b0a6 # v4.0.4
        with:
          node-version: '20'      
      - name: Post Deploy Checks
        run: 
          yarn workspace @tranmere-web/api-tests api

  publish_site:
    runs-on: ubuntu-latest
    needs: version
    permissions:
      contents: read
      deployments: write
    name: Publish to Cloudflare Pages
    steps:
      - name: Checkout
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
      - uses: actions/setup-node@0a44ba7841725637a19e28fa30b79a866c81b0a6 # v4.0.4
        with:
          node-version: '20'
      # Run a build step here if your project requires
      - name: Install
        run: yarn --frozen-lockfile 
      - name: Build
        run: yarn cloudflare-build
        env:
          API_KEY: ${{ secrets.API_KEY }}
          CONTENTFUL_SPACE_ID: ${{ secrets.CF_SPACE }}
          CONTENTFUL_ACCESS_TOKEN: ${{ secrets.CF_KEY }}
          API_PORT: "443"
          API_PROTOCOL: "https" 
          API_DOMAIN: "api.prod.tranmere-web.com"

      - uses: chrnorm/deployment-action@51e93982518dc06e500fe65559032a439663aaac
        name: Create GitHub deployment
        id: deployment
        with:
          token: '${{ secrets.GITHUB_TOKEN }}'
          environment-url: https://www.tranmere-web.com
          environment: production
          description: "Pages Deployment"   

      - name: Deploy
        id: deploy
        uses: cloudflare/wrangler-action@cd8a317efbc7fab418e9bd7092c8643d88c03321
        with:
          apiToken: ${{ secrets.CLOUDFLARE_AUTH_KEY }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: ./packages/site
          command: pages deploy .vercel/output/static --project-name=tranmere-web

      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@9a72af4586197112e0491ea843682b5dc280d806
        with:
          token: '${{ github.token }}'
          environment-url: ${{ steps.deploy.outputs.deployment-url }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: 'success'          

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@9a72af4586197112e0491ea843682b5dc280d806
        with:
          token: '${{ github.token }}'
          environment-url: ${{ steps.deployment.outputs.environment_url }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: 'failure'          